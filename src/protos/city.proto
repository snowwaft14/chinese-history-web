syntax = "proto3";

option csharp_namespace = "Newinfosoft.ChineseHistory.Server.ServiceBase";

package chinesehistory;

import "common.proto";

// 城市实体 - 跨越朝代和历史时期的概念
message City {
  string id = 1;                        // 城市唯一标识符
  string name = 2;                      // 城市现代名称（如"西安"）
  string description = 3;               // 城市描述
  repeated CityHistory history = 4;     // 城市历史轨迹
  repeated string tags = 5;             // 标签
  repeated string search_values = 6;    // 搜索辅助工具，例如拼音、声母
}

// 城市状态枚举
enum CityStatus {
  ACTIVE = 0;                           // 活跃/存在
  INACTIVE = 1;                         // 废弃/不存在
}

// 城市在特定历史时期的状态
message CityHistory {
  string id = 1;                        // 历史记录唯一标识符
  string city_id = 2;                   // 关联的城市ID
  string name = 3;                      // 该时期的城市名称（如"长安"、"咸阳"）
  string description = 4;               // 该时期的城市描述
  GregorianDate start_date = 5;         // 开始日期
  string geometry_json = 6;             // 地理位置JSON（GeoJSON格式）
  AdministrativeLevel admin_level = 7;  // 行政级别
  string dynasty_name = 8;              // 所属朝代
  CityStatus status = 9;                // 城市状态
}

// 行政级别枚举
enum AdministrativeLevel {
  UNKNOWN = 0;                          // 未知
  CAPITAL = 1;                          // 都城
  PROVINCIAL_CAPITAL = 2;               // 省会
  PREFECTURE = 3;                       // 府
  COUNTY = 4;                           // 县
  TOWN = 5;                             // 镇
  VILLAGE = 6;                          // 村
  MILITARY_FORT = 7;                    // 军事要塞
  TRADING_POST = 8;                     // 贸易据点
  RELIGIOUS_CENTER = 9;                 // 宗教中心
  PASS = 10;                            // 关隘（如虎牢关、函谷关）
}

// 获取多个城市响应（统一用于GetCities和FindCities）
message GetCitiesResponse {
  repeated City cities = 1;
}

// 获取多个城市历史响应（统一用于GetCityHistories和FindCityHistories）
message GetCityHistoriesResponse {
  repeated CityHistory city_histories = 1;
}

// 获取城市请求（无查询条件）
message GetCitiesRequest {
  // 空请求，获取所有城市
}

// 获取城市历史请求（无查询条件）
message GetCityHistoriesRequest {
  // 空请求，获取所有城市历史
}

// 查找城市请求（包含所有可能的查询条件）
message FindCitiesRequest {
  string city_id = 1;                    // 城市ID（可选）
  string name = 2;                       // 城市名称（支持模糊搜索）（可选）
  string dynasty_name = 3;               // 朝代名称（可选）
  AdministrativeLevel admin_level = 4;   // 行政级别（可选）
  CityStatus status = 5;                 // 城市状态过滤（可选）
  repeated string tags = 6;              // 标签过滤（可选）
}

// 查找城市历史请求（包含所有可能的查询条件）
message FindCityHistoriesRequest {
  string city_id = 1;                    // 城市ID（可选）
  GregorianDate start_date = 2;          // 开始日期（可选）
  GregorianDate end_date = 3;            // 结束日期（可选）
  CityStatus status = 4;                 // 城市状态过滤（可选）
  GregorianDate date = 5;                // 历史日期（可选）
  repeated AdministrativeLevel admin_levels = 6; // 行政级别过滤（可选）
}

// =========================== 批量CRUD操作 ===========================

// 批量城市操作请求
message UpsertCitiesRequest {
  repeated City cities = 1;              // 要插入或更新的城市列表
}

// 批量删除城市请求
message DeleteCitiesRequest {
  repeated string city_ids = 1;          // 要删除的城市ID列表
}

// 批量城市历史操作请求
message UpsertCityHistoriesRequest {
  repeated CityHistory city_histories = 1; // 要插入或更新的城市历史列表
}

service CityService {
  // ============== 查询操作 ==============
  // 获取所有城市
  rpc GetCities(GetCitiesRequest) returns (GetCitiesResponse);
  
  // 查找城市（根据条件）
  rpc FindCities(FindCitiesRequest) returns (GetCitiesResponse);
  
  // 获取所有城市历史
  rpc GetCityHistories(GetCityHistoriesRequest) returns (GetCityHistoriesResponse);
  
  // 查找城市历史（根据条件）
  rpc FindCityHistories(FindCityHistoriesRequest) returns (GetCityHistoriesResponse);
  
  // ============== 批量CRUD操作 ==============
  // 批量插入或更新城市
  rpc UpsertCities(UpsertCitiesRequest) returns (BatchOperationResponse);
  
  // 批量删除城市
  rpc DeleteCities(DeleteCitiesRequest) returns (BatchOperationResponse);
  
  // 批量插入或更新城市历史
  rpc UpsertCityHistories(UpsertCityHistoriesRequest) returns (BatchOperationResponse);
}