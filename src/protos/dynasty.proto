syntax = "proto3";

option csharp_namespace = "Newinfosoft.ChineseHistory.Server.ServiceBase";

package chinesehistory;

import "common.proto";

// 王朝，例如唐、宋、元、明、清
message Dynasty {
  string name = 1;
  string description = 2;
  int32 start_year = 3;
  int32 end_year = 4;
  repeated Period periods = 5;
  repeated Emperor emperors = 6;        // 所有皇帝
  repeated string tags = 7;
  repeated string search_values = 8;    // 搜索辅助工具，例如拼音、声母
}

// 王朝下的一些时代，例如北宋、南宋、初唐、盛唐、中唐、晚唐、安史之乱、贞观之治等等
message Period {
  string name = 1;
  string description = 2;
  HistoricalDate start = 3;           // 开始日期
  HistoricalDate end = 4;             // 结束日期 
  repeated string search_values = 5;    // 搜索辅助工具，例如拼音、声母
}

// 皇帝或国家的领袖
message Emperor {
  string id = 1;                         // 唯一标识符，一般是约定叫法，例如"汉武帝"、"唐太宗"、"清康熙"
  string name = 2;                       // 皇帝姓名，如"赵匡胤"
  string temple_name = 3;                // 庙号，如"太祖"
  string posthumous_name = 4;            // 谥号，如"文皇帝"
  string courtesy_name = 5;              // 字（如"德基"）
  string dynasty_name = 6;               // 所属朝代ID，如"唐朝"
  repeated EraName era_names = 7;        // 所有年号

  HistoricalDate reign_start = 8;        // 在位起始
  HistoricalDate reign_end = 9;          // 在位结束
  HistoricalDate birth = 10;             // 出生日期
  HistoricalDate death = 11;             // 去世日期

  string birthplace = 12;                // 出生地
  string burial_place = 13;              // 陵墓或安葬地
  string notes = 14;                     // 备注或简介
  repeated string search_values = 15;    // 搜索辅助工具，例如拼音、声母
}

// 年号
message EraName {
  string name = 1;                       // 年号名称，如"贞观"
  HistoricalDate start_date = 2;         // 年号开始日期
  HistoricalDate end_date = 3;           // 年号结束日期
  string note = 4;                       // 补充信息（如更改原因、事件）
  repeated string search_values = 5;     // 搜索辅助工具，例如拼音、声母
}

// 获取多个朝代响应
message GetDynastiesResponse {
  repeated Dynasty dynasties = 1;
}

// 获取单个朝代响应
message GetDynastyResponse {
  Dynasty dynasty = 1;
}

// 获取多个皇帝响应
message GetEmperorsResponse {
  repeated Emperor emperors = 1;
}

// 获取单个皇帝响应
message GetEmperorResponse {
  Emperor emperor = 1;
}

// 获取多个朝代的年号响应
message GetErasResponse {
  repeated EraName era_names = 1;       // 年号列表
}

message GetAllDynastiesRequest{

}

// 获取皇帝详情请求
message GetEmperorByIdRequest {
  string emperor_id = 1;                 // 皇帝ID
}

// 获取单个朝代详情请求
message GetDynastyByIdRequest {
  string dynasty_id = 1;                 // 朝代ID
}

// 获取朝代皇帝请求
message GetEmperorsByDynastyRequest {
  string dynasty_id = 1;                 // 朝代ID
}

// 获取朝代年号请求
message GetErasByDynastyRequest {
  string dynasty_id = 1;               // 朝代ID
}

// 获取朝代皇帝请求
message GetErasByEmperorRequest {
  string emperor_id = 1;                 // 皇帝ID
}

// 获取特定年号请求
message GetEraByNameRequest {
  string dynasty_id = 1;                 // 朝代ID
  string era_name = 2;                   // 年号名称
}

// 获取单个年号响应
message GetEraResponse {
  EraName era_name = 1;                  // 年号信息
}

// 朝代服务
service DynastyService {
  // 获取所有朝代
  rpc GetAllDynasties(GetAllDynastiesRequest) returns (GetDynastiesResponse);

  // 获取单个朝代详情
  rpc GetDynastyById(GetDynastyByIdRequest) returns (GetDynastyResponse);
  
  // 获取某个朝代下的皇帝
  rpc GetEmperorsByDynasty(GetEmperorsByDynastyRequest) returns (GetEmperorsResponse);

  // 获取皇帝详情
  rpc GetEmperor(GetEmperorByIdRequest) returns (GetEmperorResponse);

  // 获取某个皇帝下的年号
  rpc GetErasByEmperor(GetErasByEmperorRequest) returns (GetErasResponse);
  
  // 获取朝代下的所有年号
  rpc GetErasByDynasty(GetErasByDynastyRequest) returns (GetErasResponse);

  // 获取特定年号信息
  rpc GetEraByName(GetEraByNameRequest) returns (GetEraResponse);

} 